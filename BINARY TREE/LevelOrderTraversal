package binaryTree;
import java.util.*;

import java.util.LinkedList;

public class levelOrder {
    static class Node {
        int data ;
        Node left;
        Node right;
        Node (int data ){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    static class binaryTree{
        int i=-1;
        public Node add(int arr[]){
            i++;
            if(arr[i]==-1){
                return null;
            }
             Node newNode =new Node(arr[i]);
             newNode.left=add(arr);
             newNode.right=add(arr);
             return newNode;
        }
    }
    public static void levelOrderr(Node head){
        Queue<Node> q=new LinkedList<>();
        q.add(head);
        q.add(null);
        while(!q.isEmpty()){
            Node newNode=q.remove();
            if(newNode==null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }else{
                    q.add(null);
                }
            }else{
                System.out.print(newNode.data);
               if(newNode.left!=null){
                q.add(newNode.left);
               }
               if(newNode.right!=null){
                q.add(newNode.right);
               }
            }
        }
    }
    public static void main(String[] args) {
        int arr[]={1,2,3,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        binaryTree tree =new binaryTree();
        Node root =tree.add(arr);
        System.out.println(root.data);
        levelOrderr(root);
    }
}
