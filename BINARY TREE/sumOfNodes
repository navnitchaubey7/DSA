// TIME COMPLEXICITY ==0(n)
package binaryTree;

public class sumOfNodes {
static class Node{
        int data ;
        Node left;
        Node right;
        
      Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
static class binaryTree{
        static int i=-1;
        public Node add(int arr[]){
            i++;
            if(arr[i]==-1){
                return null;
            }
            Node newNode=new Node(arr[i]);
            newNode.left=add(arr);
            
            newNode.right=add(arr);
            return newNode;
            
        }
    }
  public static int sum(Node root){
        if(root==null){
            return 0;
        }
        int left=sum(root.left);
        int right=sum(root.right);
        return left+right+root.data;
    }
  public static void main(String args[]){
    
        int arr[]={1,2,3,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        
        binaryTree tree =new binaryTree();

        Node root=tree.add(arr);
        
        System.out.println(sum(root));
    }
    
}
