package graphTraversal;

/* GRAPH DO NOT HAVE ROOT 
 * WE USE QUEUE DATA STRUCTURE 
 * WE CRETE A QUEUE AND A VISITED ARRAY OF LENGTH EQUAL TO NUMBER OF VERETEX
 * WHICH TRACK WHEATHER A NODE IS VISITED OR NOT 
 * 
 * LOGIC 
 * 
 * IF VISITED ==FALSE 
 * PRIINT CURRENT 
 * VISITED=TRUE 
 * CURRENT NEIGHBOUR KO ADD KR DNGE QUEUE ME 
 * 
 * TIME COMPLEXICITY =O(V+E)
 */
import java.util.*;

public class BFS {

    static class Edge {
        int src;
        int dest;

        Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public static void builtGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0, 2));
        graph[1].add(new Edge(1, 2));
        graph[1].add(new Edge(1, 3));
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));
        graph[2].add(new Edge(2, 3));
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 2));
    }

    public static void bfs(ArrayList<Edge> graph[], int v) {
        Queue<Integer> q = new LinkedList<>();
        boolean visited[] = new boolean[v];
        q.add(0);
        while (!q.isEmpty()) {
            int curr = q.remove();
            if (visited[curr] == false) {
                System.out.println(curr + " ");
                visited[curr] = true;
                for (int i = 0; i < graph[curr].size(); i++) {
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }
            }
        }
    }

    public static void bfss(ArrayList<Edge> graph[], int v) {
        Queue<Integer> q = new LinkedList<>();
        boolean visited[] = new boolean[v];
        q.add(0);
        while (!q.isEmpty()) {
            int curr = q.remove();
            if (visited[curr] == false) {
                System.out.println(curr + "");
                visited[curr] = true;
                for (int i = 0; i < graph[curr].size(); i++) {
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }
            }

        }
    }

    public static void main(String[] args) {
        int V = 4;
        ArrayList<Edge> graph[] = new ArrayList[V];
        builtGraph(graph);
        bfs(graph, V);
        bfss(graph, V);
    }
}
