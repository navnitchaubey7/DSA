
/*           TIME COMPLEXICITY =O(vtothe power v)  bht bekar 
*/
import java.util.*;

public class pathSourceTarget {
    static class Edge {
        int source;
        int dest;

        Edge(int s, int d) {
            this.source = s;
            this.dest = d;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0, 2));
        graph[1].add(new Edge(1, 2));
        graph[1].add(new Edge(1, 3));
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));
        graph[2].add(new Edge(2, 3));
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 2));

    }

    public static void printPath(ArrayList<Edge> graph[], boolean visited[], int curr, String path, int target) {
        if (curr == target) {
            System.out.println(path);
            return;
        }
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (visited[e.dest] == false) {
                visited[e.dest] = true;
                printPath(graph, visited, e.dest, path + e.dest, target);
                visited[e.dest] = false;
            }
        }
    }

    public static void main(String[] args) {
        int v = 4;
        ArrayList<Edge> graph[] = new ArrayList[v];
        boolean visited[] = new boolean[v];
        createGraph(graph);
        int s = 0;
        int target = 3;
        printPath(graph, visited, s, "0", target);

    }

}
