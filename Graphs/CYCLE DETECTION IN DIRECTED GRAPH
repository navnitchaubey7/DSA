// PROGRAM FOR CYCLE DETECTION IN DIRECTED GRAPH 
import java.util.*;

public class cycleDetectionD {
    static class Edge {
        int source;
        int dest;

        Edge(int s, int d) {
            this.source = s;
            this.dest = d;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0, 2));
        graph[1].add(new Edge(1, 2));
        graph[1].add(new Edge(1, 3));
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 1));
        graph[2].add(new Edge(2, 3));
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 2));

    }

    public static boolean hadLoop(ArrayList<Edge> graph[], boolean visited[], int curr, boolean rec[]) {
        visited[curr] = true;
        rec[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (rec[e.dest]) {
                return true;
            } else if (visited[e.dest] == false) {
                hadLoop(graph, visited, e.dest, rec);
            }
        }
        rec[curr] = false;
        return false;
    }

    public static void main(String[] args) {
        int v = 4;
        ArrayList<Edge> graph[] = new ArrayList[v];
        boolean visited[] = new boolean[v];
        createGraph(graph);
        boolean result = hadLoop(graph, visited, 0, new boolean[v]);
        if (result == true) {
            System.out.println("yes");
        } else {
            System.out.println("nahi");
        }

    }

}
