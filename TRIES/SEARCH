// time complexity O(l)
public class search {
    static class Node {
        Node children[];
        boolean eow;

        Node() {
            children = new Node[26];
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
            eow = false;
        }
    }

    static Node root = new Node();

    public static void insert(String word) {
        Node curr = root;
        for (int i = 0; i < word.length(); i++) {
            int ind = word.charAt(i) - 'a';
            if (curr.children[ind] == null) {
                curr.children[ind] = new Node();
            }
            curr = curr.children[ind];
        }
        curr.eow = true; // Move this line outside the loop
    }

    public static boolean search(String key) {
        Node curr = root;
        for (int i = 0; i < key.length(); i++) {
            int index = key.charAt(i) - 'a';
            if (curr.children[index] == null) {
                return false;
            }
            curr = curr.children[index];
            if (curr.eow == false && i == key.length() - 1) {
                return false;
            }
        }
        return true;
    }

    public static void main(String args[]) {
        String word[] = { "this", "is", "the", "word", "thi" };
        for (int i = 0; i < word.length; i++) {
            insert(word[i]);
        }
        System.out.println(search("this"));
        System.out.println(search("navnit"));
    }
}
