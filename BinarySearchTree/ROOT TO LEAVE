package BST;

import java.util.ArrayList;

public class rootToLeef {
    static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.right = null;
            this.left = null;
        }
    }

    public static Node add(Node root, int data) {
        if (root == null) {
            return new Node(data);
        }
        if (root.data < data) {
            root.right = add(root.right, data);
        } else {
            root.left = add(root.left, data);
        }
        return root;
    }

    public static void printpath(ArrayList<Integer> path) {
        for (int i = 0; i < path.size(); i++) {
            System.out.println(path.get(i));
        }
    }

public static void print2leave(Node root,ArrayList<Integer> path){
    if(root==null){
        return;
    }
    path.add(root.data);
    // leaf 
    if(root.left==null&&root.right==null){
        printpath(path);
    }else{

    
    print2leave(root.left, path);
    print2leave(root.right, path);
    }
    path.remove(path.size()-1);
}

    public static void inorder(Node root) {
        if (root == null) {
            return;
        }
        inorder(root.left);
        System.out.println(root.data);
        inorder(root.right);
    }

    public static void main(String[] args) {
        Node root = null;
        int arr[] = { 1, 5, 4, 6, 2, 3, 8 };
        for (int i = 0; i < arr.length; i++) {
            root = add(root, arr[i]);
        }
        System.out.println(root.data);
        inorder(root);
        print2leave(root, new ArrayList<>());

    }
}
